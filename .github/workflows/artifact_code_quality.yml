name: Artifact Code Quality Checks

on:
  workflow_call:
    inputs:
      artifact-type:
        required: true
        type: string
      ref:
        required: false
        type: string
        default: ''

jobs:
  protocol-check-format:
    name: "Protocol: Check formatting"
    if: inputs.artifact-type == 'protocol'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: "Check with prettier"
        run: |
          yarn add prettier --dev
          yarn run prettier --check .

  ids-run-schema-validation:
    name: "IDS: Validate IDS"
    if: inputs.artifact-type == 'ids'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: "Set up Python"
        uses: actions/setup-python@v2
      - name: "Run IDS validator"
        run: |
          pip install ts-ids-validator
          python -m ids_validator --ids_dir .

  ids-check-format:
    name: "IDS: Check formatting"
    if: inputs.artifact-type == 'ids'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: "Check with prettier"
        run: |
          yarn add prettier --dev
          yarn run prettier --check .
      - name: Setup Python
        uses: actions/setup-python@v3
        if: hashFiles('poetry.lock') != '' || hashFiles('Pipfile') != ''
      - name: "Check with black"
        if: hashFiles('poetry.lock') != '' || hashFiles('Pipfile') != ''
        run: |
          pip install black
          black --check .

  task-script-check-context-api:
    name: "Task-Script: Deprecation warnings for ts-sdk-python Context"
    if: inputs.artifact-type == 'task-script'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
          ref: ${{ inputs.ref }}
      - name: Checkout custom pylint plugin
        if: hashFiles('main.py') != ''
        uses: actions/checkout@v3
        with:
          repository: tetrascience/ts-data-insights-ci-cd-common
          ref: "${{ inputs.deprecation_checker_ref }}"
          path: .github/pylint-plugin
      - uses: ./.github/pylint-plugin/.github/actions/deprecation-checker
        if: hashFiles('main.py') != ''

  task-script-check-format:
    name: "Task-Script: Check formatting"
    if: inputs.artifact-type == 'task-script'
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
      # Install a fixed version of python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
          ref: ${{ inputs.ref }}
      # Check the files with black
      - run: |
          pip install black
          black --check .

  task-script-test:
    name: "Task-Script: Run pytest"
    if: inputs.artifact-type == 'task-script'
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
        with:
          lfs: true
          ref: ${{ inputs.ref }}
      # Install a fixed version of python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      # if there's a Pipfile, use pipenv
      - name: Test with pipenv
        if: hashFiles('Pipfile') != ''
        run: |
          pip install pipenv
          pipenv sync --dev
          pipenv run pip install pytest-cov
          pipenv run python -m pytest -v --cov --cov-branch --cov-report xml
      # check for a poetry lockfile (since we can't rely on pyproject.toml indicating a poetry project)
      - name: Test with poetry
        if: hashFiles('poetry.lock') != ''
        run: |
          pip install poetry
          poetry install
          poetry run pip install pytest-cov
          poetry run python -m pytest -v --cov --cov-branch --cov-report xml
      # no pipfile or poetry lockfile, so we'll just install pytest with pip and run that
      - name: Test with pip
        if: hashFiles('Pipfile') == '' && hashFiles('poetry.lock') == ''
        run: |
          pip install pytest pytest-cov
          python -m pytest -v --cov --cov-branch --cov-report xml
