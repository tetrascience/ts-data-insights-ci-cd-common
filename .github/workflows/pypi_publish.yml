# This workflow will add 2 jobs:
# - check-format: checks whether any files would be reformatted by `black`
# - test: runs `pytest`.  Uses `pipenv`, `poetry`, or `pip` depending on the files present

name: PyPI Publisher

on:
  workflow_call:
    inputs:
      # Python version is required in order to make sure that pytest and black can be run correctly
      python-version:
        required: true
        type: string
    secrets:
      PYPI_TEST_TOKEN:
        required: false
      PYPI_PROD_TOKEN:
        required: false
      ARTIFACTORY_USER:
        required: false
      ARTIFACTORY_PASSWORD:
        required: false
      ARTIFACTORY_URL:
        required: false

jobs:
  pypi-publish:
    name: PyPI Publish
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Validate github actor
        # Download the Owners file for ts-data-insights-code-owners
        # Proceed only if Owner file has been downloaded, make sure
        # GITHUB_ACTOR is listed in the owner file
        run: |
          repo_name=`echo $GITHUB_REPOSITORY | awk -F "/" '{print $2}'`
          repo_file="$repo_name.txt"
          git_repo_owner_file="https://raw.githubusercontent.com/tetrascience/ts-data-insights-code-owners/main/$repo_file"
          wget $git_repo_owner_file
          return_code=$?
          echo "$return_code"
          if [[ $return_code != 0 ]]; then
              echo "Failed to download $git_repo_owner_file"
              exit 1
          fi
          if [[ $? != 0 ]]; then
              echo "Failed to download $git_repo_owner_file"
              exit 1
          fi
          grep_owner=`cat $repo_file | grep $GITHUB_ACTOR`
          echo "$?"
          echo "$grep_owner"
          if [[ $grep_owner != $GITHUB_ACTOR ]]; then
              echo "Unauthorized user: $GITHUB_ACTOR"
              echo "Authorized Users:"
              echo `cat $repo_file`
              exit 1
          fi

      - name: Validate Package Manger
        # Stop GA if both setup.py and poetry.lock are present
        # We dont know which one to use
        run: |
          if [[ -f setup.py && -f poetry.lock ]]; then
            echo "Both setup.py and poetry.lock exists. Only one of them must be present."
            exit 1
          fi

      - name: Build Package using Poetry
        if: hashFiles('poetry.lock') != ''
        run: |
          echo "Building Package"
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install poetry
          python3 -m poetry build

          echo "\nValidating Build Version"
          build_version=$(ls dist/*tar.gz | awk -F"-" '{ print $2 }' | awk -F".tar" '{ print $1 }')
          github_release_version=$(echo $GITHUB_REF_NAME | tr -d 'v')
          echo "Build Version: ${build_version}"
          echo "Github Release version: ${github_release_version}"
          if [[ "$build_version" != "$github_release_version" ]]; then
            echo "Release Version mismatch. Stopping..."
            exit 1
          fi

      - name: Build Package using setup.py
        if: hashFiles('setup.py') != ''
        run: |
          echo "$PWD"
          ls -l $PWD
          echo "\nBuilding Package"
          python3 -m pip install --upgrade pip setuptools wheel build
          python3 -m build


          echo "\nValidating Build Version"
          build_version=$(ls dist/*tar.gz | awk -F "-" '{ print $2 }' | awk -F ".tar" '{ print $1 }')
          github_release_version=$(echo $GITHUB_REF_NAME | tr -d 'v')
          echo "Build Version: ${build_version}"
          echo "Github Release version: ${github_release_version}"
          if [[ "$build_version" != "$github_release_version" ]]; then
            echo "Release Version mismatch. Stopping..."
            exit 1
          fi

      - name: Publish package to test pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
