# This workflow will add 3 jobs:
# - lint: uses `flake8` to lint the code and add comments if it is a PR
# - check-format: checks whether any files would be reformatted by `black`
# - test: runs `pytest`.  Uses `pipenv`, `poetry`, or `pip` depending on the files present

name: Python Code Quality

on:
  workflow_call:
    inputs:
      # Python version is required in order to make sure that pytest and black can be run correctly
      python-version:
        required: true
        type: string
      run_tests:
        required: false
        type: boolean
        default: true
    secrets:
      CODACY_PROJECT_TOKEN:
        required: false
      ARTIFACTORY_PASSWORD:
         required: false              

jobs:
  lint:
    name: Run python linters
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2
      # Setup the reviewdog app
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]
      # Install any linters we will use
      - name: Install linters
        run: |
          pip install flake8 pylint
      - name: Run linters
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::*** FLAKE8 LINTING ***"
          flake8 . | reviewdog -reporter="github-pr-review" -f flake8 -name flake8 -level info  -tee
          echo "::endgroup::"
          echo "::group::*** PYLINT LINTING ***"
          # pylint is a little trickier to run.  This command:
          # - finds all python files (output: './main.py', './src/parse.py')
          # - prints only the files and directories that are in the current directory with awk (output: 'main.py', 'src')
          # - removes duplicates with sort -u (unique)
          find . -name '*py' | awk -F / '{print $2}' | sort -u > files_for_pylint.txt
          # run these files/dirs through pylint and let reviewdog post comments
          cat files_for_pylint.txt | xargs pylint | reviewdog -reporter="github-pr-review" -efm="%f:%l:%c: %m" -name pylint -level info --tee
          echo "::endgroup::"

  check-format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
      # Install a fixed version of python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      # Check the files with black
      - run: |
          pip install black
          black --check .
  test:
    name: Run pytest
    runs-on: ubuntu-latest
    if: ${{ inputs.run_tests }}
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
        with:
          lfs: true
      # Install a fixed version of python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      # if there's a Pipfile, use pipenv
      - name: Test with pipenv
        if: hashFiles('Pipfile') != ''
        run: |
          pip install pipenv
          pipenv sync --dev
          pipenv run pip install pytest-cov
          pipenv run python -m pytest -v --cov --cov-branch --cov-report xml
        env:
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      # check for a poetry lockfile (since we can't rely on pyproject.toml indicating a poetry project)
      - name: Test with poetry
        if: hashFiles('poetry.lock') != ''
        run: |
          pip install poetry
          poetry config http-basic.artifactory ts-jfrog-artifactory "$ARTIFACTORY_PASSWORD"
          poetry install
          poetry run pip install pytest-cov
          poetry run python -m pytest -v --cov --cov-branch --cov-report xml
        env: 
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}  
      # no pipfile or poetry lockfile, so we'll just install pytest with pip and run that
      - name: Test with pip
        if: hashFiles('Pipfile') == '' && hashFiles('poetry.lock') == ''
        run: |
          exit "No lock file available"

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        # Only run if the CODACY_PROJECT_TOKEN is set
        # Pattern from https://github.community/t/how-can-i-test-if-secrets-are-available-in-an-action/17911/10
        env:
          CODACY_CHECK: ${{ secrets.CODACY_PROJECT_TOKEN }}
        if: env.CODACY_CHECK
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
