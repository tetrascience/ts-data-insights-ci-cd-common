# This workflow will add 2 jobs:
# - check-format: checks whether any files would be reformatted by `black`
# - test: runs `pytest`.  Uses `pipenv`, `poetry`, or `pip` depending on the files present

name: Python Code Quality

on:
  workflow_call:
    inputs:
      # Python version is required in order to make sure that pytest and black can be run correctly
      python-version:
        required: true
        type: string
      run_tests:
        required: false
        type: boolean
        default: true
    secrets:
      CODACY_PROJECT_TOKEN:
        required: false

jobs:
  check-context-api:
    name: Deprecation warnings for ts-sdk-python Context
    runs-on: ubuntu-latest
    steps:
     - run: |
        echo 'ls -la'
        ls -la
        echo "PWD: ${PWD}"
        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
  test:
    name: Run pytest
    runs-on: ubuntu-latest
    if: ${{ inputs.run_tests }}
    steps:
      # Checkout the code
      - uses: actions/checkout@v2
        with:
          lfs: true
      # Install a fixed version of python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      # if there's a Pipfile, use pipenv
      - name: Test with pipenv
        if: hashFiles('Pipfile') != ''
        run: |
          pip install pipenv
          pipenv sync --dev
          pipenv run pip install pytest-cov
          pipenv run python -m pytest -v --cov --cov-branch --cov-report xml
      # check for a poetry lockfile (since we can't rely on pyproject.toml indicating a poetry project)
      - name: Test with poetry
        if: hashFiles('poetry.lock') != ''
        run: |
          pip install poetry
          poetry install
          poetry run pip install pytest-cov
          poetry run python -m pytest -v --cov --cov-branch --cov-report xml
      # no pipfile or poetry lockfile, so we'll just install pytest with pip and run that
      - name: Test with pip
        if: hashFiles('Pipfile') == '' && hashFiles('poetry.lock') == ''
        run: |
          pip install pytest pytest-cov
          python -m pytest -v --cov --cov-branch --cov-report xml

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        # Only run if the CODACY_PROJECT_TOKEN is set
        # Pattern from https://github.community/t/how-can-i-test-if-secrets-are-available-in-an-action/17911/10
        env:
          CODACY_CHECK: ${{ secrets.CODACY_PROJECT_TOKEN }}
        if: env.CODACY_CHECK
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
