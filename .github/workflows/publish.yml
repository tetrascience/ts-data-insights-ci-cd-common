name: Build and Publish Artifact

on:
  workflow_call:
    inputs:
      python-version:
        type: string
        default: "3.7"
      namespace:
        required: true
        type: string
      slug:
        required: true
        type: string
      type:
        required: false
        type: string
        # For backwards compatibility
        default: "task-script"
      tag:
        type: string
        required: false
        default: ""
      env:
        type: string
        required: false
        default: ""
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      ssh_key:
        description: An SSH key with access to the Tetrascience Org
        required: true

jobs:
  publish-pull-request:
    name: "Build and Publish Artifact for the Pull Request"
    runs-on: ubuntu-latest
    # Only run this job if it is either a pull request or if it is a tag that was pushed
    if: github.event_name == 'pull_request'
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3
      # Setup Python and Install: Poetry, Pipenv
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version || '3.7' }}
      - run: |
          pip install poetry pipenv
      # Publish to correct targets
      - name: "Publish"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # NOTE: update reference here to use a different version of the action
        uses: tetrascience/ts-deploy-task-script-action@v0.4.0
        with:
          type: ${{ inputs.type }}
          namespace: ${{ inputs.namespace }}
          slug: ${{ inputs.slug }}
          ssh_key: ${{ secrets.ssh_key }}

  validate-workflow-inputs:
    name: "Validate env, tag and ref for artifact deployment"
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/'))
    steps:
      - run: |
          echo "Inputs:"
          echo "${{ toJSON(inputs) }}"

          if [[ 'DEV/UAT' == ${{ inputs.env }} || 'PROD' = ${{ inputs.env }} ]]; then
            echo "Artifact will be deployed to ${{ inputs.env }} environment"
          else
            echo "Invalid Environment: ${{ inputs.env }}"
            echo "'inputs.env' must either be set to 'DEV/UAT' or 'PROD'"
            exit 1
          fi

          if [[ ${{ inputs.tag }} == v* ]]; then
            echo "Tag: ${{ inputs.tag }} will be deployed"
          else
            echo "'inputs.tag' must start with v"
            echo "vX.Y.Z and vX.Y.Z.build are accepted formats"
            exit 1


  deploy-artifact:
    needs: validate-workflow-inputs
    name: "Deploy Tag:${{ inputs.tag }} to ${{ inputs.env }}"
    environment: ${{ inputs.env }}
    runs-on: ubuntu-latest
    # Only run this job if it is either a pull request or if it is a tag that was pushed
    if: |
      github.event_name == 'push' &&
      startsWith(github.event.ref, 'refs/tags/') &&
      contains(fromJson('["DEV/UAT", "PROD", "PRODUCTION"]'), inputs.env) &&
      startsWith(inputs.tag, 'v')

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.tag }}

      # Setup Python and Install: Poetry, Pipenv
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version || '3.7' }}
      - run: |
          pip install poetry pipenv

      # Publish to correct targets
      - name: "Build and Deploy to ${{ inputs.env }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        # NOTE: update reference here to use a different version of the action
        uses: tetrascience/ts-deploy-task-script-action@main
        with:
          type: ${{ inputs.type }}
          namespace: ${{ inputs.namespace }}
          slug: ${{ inputs.slug }}
          ssh_key: ${{ secrets.ssh_key }}
